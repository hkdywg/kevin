# ==========================================================================
# Building
# ==========================================================================

src := $(obj)

PHONY := __build
__build:

# Init all relevant variables used in kbuild files so
# 1) they have correct type
# 2) they do not inherit any value from the environment
obj-y :=
lib-y :=
always :=
targets :=
subdir-y :=
EXTRA_AFLAGS   :=
EXTRA_CFLAGS   :=
EXTRA_CPPFLAGS :=
EXTRA_LDFLAGS  :=
asflags-y  :=
ccflags-y  :=
cppflags-y :=
ldflags-y  :=

subdir-asflags-y :=
subdir-ccflags-y :=


# For backward compatibility check that these variables do not change
save-cflags := $(CFLAGS)
# The filename Kbuild has precedence over Makefile
#kbuild-dir := $(if $(KBUILD_SRC),$(KBUILD_SRC)/)$(src)
kbuild-dir := $(srctree)/$(src)
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
include $(kbuild-file)

# If the save-* variables changed error out
ifeq ($(KBUILD_NOPEDANTIC),)
        ifneq ("$(save-cflags)","$(CFLAGS)")
                $(error CFLAGS was changed in "$(kbuild-file)". Fix it to use EXTRA_CFLAGS)
        endif
endif

#
# make W=... settings
#
# W=1 - warnings that may be relevant and does not occur too often
# W=2 - warnings that occur quite often but may still be relevant
# W=3 - the more obscure warnings, can most likely be ignored
#
# $(call cc-option, -W...) handles gcc -W.. options which
# are not supported by all versions of the compiler
ifdef KBUILD_ENABLE_EXTRA_GCC_CHECKS
warning-  := $(empty)

warning-1 := -Wextra -Wunused -Wno-unused-parameter
warning-1 += -Wmissing-declarations
warning-1 += -Wmissing-format-attribute
warning-1 += -Wmissing-prototypes
warning-1 += -Wold-style-definition
warning-1 += $(call cc-option, -Wmissing-include-dirs)
warning-1 += $(call cc-option, -Wunused-but-set-variable)

warning-2 := -Waggregate-return
warning-2 += -Wcast-align
warning-2 += -Wdisabled-optimization
warning-2 += -Wnested-externs
warning-2 += -Wshadow
warning-2 += $(call cc-option, -Wlogical-op)

warning-3 := -Wbad-function-cast
warning-3 += -Wcast-qual
warning-3 += -Wconversion
warning-3 += -Wpacked
warning-3 += -Wpadded
warning-3 += -Wpointer-arith
warning-3 += -Wredundant-decls
warning-3 += -Wswitch-default
warning-3 += $(call cc-option, -Wpacked-bitfield-compat)
warning-3 += $(call cc-option, -Wvla)

warning := $(warning-$(findstring 1, $(KBUILD_ENABLE_EXTRA_GCC_CHECKS)))
warning += $(warning-$(findstring 2, $(KBUILD_ENABLE_EXTRA_GCC_CHECKS)))
warning += $(warning-$(findstring 3, $(KBUILD_ENABLE_EXTRA_GCC_CHECKS)))

ifeq ("$(strip $(warning))","")
        $(error W=$(KBUILD_ENABLE_EXTRA_GCC_CHECKS) is unknown)
endif

KBUILD_CFLAGS += $(warning)
endif

ifneq ($(KBUILD_SRC),)
# Create output directory if not already present
_dummy := $(shell [ -d $(obj) ] || mkdir -p $(obj))

# Create directories for object files if directory does not exist
# Needed when obj-y := dir/file.o syntax is used
_dummy := $(foreach d,$(obj-dirs), $(shell [ -d $(d) ] || mkdir -p $(d)))
endif

ifndef obj
$(warning kbuild: Makefile.build is included improperly)
endif

ifneq ($(KBUILD_SRC),)
obj_prefix := $(KBUILD_SRC)/
endif

#
# Handle objects in subdirs
#
subdir-obj-y := $(patsubst %/, %/built-in.a, $(filter %/, $(obj-y)))
subdir-obj-y := $(addprefix $(obj_prefix)$(obj)/, $(subdir-obj-y))
subdir-y := $(addprefix $(srctree)$(obj)/, $(patsubst %/,%,$(filter %/, $(obj-y))))
subdir-obj-p := $(dir $(abspath $(subdir-obj-y)))

subdir := $(addprefix $(obj)/, $(patsubst %/,%,$(filter %/, $(obj-y))))


ifneq ($(subdir-obj-y),)
include $(subdir-y)/Makefile
real-obj := $(addprefix $(obj_prefix)$(subdir)/, $(filter %.o, $(obj-y)))
else
real-obj := $(addprefix $(obj_prefix)$(obj)/, $(filter %.o, $(obj-y)))
endif

_dummy := $(foreach d,$(real-obj), $(shell [ -d $(dir $(d)) ] || mkdir -p $(dir $(d))))

$(warning --------- $(subdir-y))

#
# compilation parameter 
#
c_flags =  $(NOSTDINC_FLAGS) $(KERNEL_INCLUDE) \
		  -I$(srctree)/$(obj)/include \
		  $(if $(subdir-y),-I$(subdir-y)/include)

a_flags =  $(NOSTDINC_FLAGS) $(KERNEL_INCLUDE) \
		  -I$(srctree)/$(obj)/include \
		  -I$(srctree)/$(subdir)/include

# ===========================================================================

ifneq ($(strip $(obj-y) $(obj-)),)
builtin-target := $(obj)/built-in.a
endif

__build: $(builtin-target)

# Compile C sources (.c)
# ---------------------------------------------------------------------------

# Default is built-in, unless we know otherwise
cmd_cc_s_c       = $(CC) $(c_flags) -fverbose-asm -S -o $@ $<

$(obj_prefix)%.s: %.c FORCE
	$(Q)$(cmd_cc_s_c)

cmd_cc_i_c       = $(CPP) $(c_flags)   -o $@ $<

$(obj_prefix)%.i: %.c FORCE
	$(Q)$(cmd_cc_i_c)

# C (.c) files
# The C file is compiled and updated dependency information is generated.

cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<

# Built-in and composite module parts
$(obj_prefix)%.o: %.c FORCE
	$(Q)$(cmd_cc_o_c)

# Compile assembler sources (.S)
# ---------------------------------------------------------------------------

modkern_aflags := $(KBUILD_AFLAGS_KERNEL) $(AFLAGS_KERNEL)

cmd_as_s_S       = $(CPP) $(a_flags)   -o $@ $< 

$(obj_prefix)%.s: %.S FORCE
	$(Q)$(cmd_as_s_S)

cmd_as_o_S       = $(CC) $(a_flags) -c -o $@ $<

$(obj_prefix)%.o: %.S FORCE
	$(Q)$(cmd_as_o_S)

targets += $(real-objs-y) $(lib-y) $(subdir-obj-y)
targets += $(extra-y) $(MAKECMDGOALS) $(always)

# Linker scripts preprocessor (.lds.S -> .lds)
# ---------------------------------------------------------------------------
cmd_cpp_lds_S = $(CPP) $(cpp_flags) -P -C -U$(ARCH) \
	                     -D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<

$(obj_prefix)%.lds: %.lds.S FORCE
	$(Q)$(cmd_cpp_lds_S)

# Build the compiled-in targets
# ---------------------------------------------------------------------------

# To build objects in subdirs, we need to descend into the directories
#$(sort $(subdir-obj-y)): $(subdir-ym) ;

#
# Rule to compile a set of .o files into one .o file
#
ifdef builtin-target
# If the list of objects to link is empty, just create an empty built-in.o
cmd_link_o_target = $(if $(strip $(obj-y)),\
		      $(LD) $(ld_flags) -r -o $@ $(filter $(real-obj), $^), \
		      rm -f $@; $(AR) rcs$(KBUILD_ARFLAGS) $@)

$(builtin-target): $(real-obj) FORCE
	$(Q)$(cmd_link_o_target)


targets += $(builtin-target)
endif # builtin-target

# Add FORCE to the prequisites of a target to force it to be always rebuilt.
# ---------------------------------------------------------------------------

PHONY += FORCE

FORCE:

# Declare the contents of the .PHONY variable as phony.  We keep that
# information in a variable se we can use it in if_changed and friends.

.PHONY: $(PHONY)

